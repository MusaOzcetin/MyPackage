var documenterSearchIndex = {"docs":
[{"location":"#MyPackage","page":"Home","title":"MyPackage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MyPackage.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#MyPackage.CreateGenome.create_genome-Tuple{Int64, Int64, Int64}","page":"Home","title":"MyPackage.CreateGenome.create_genome","text":"create_genome(id, num_inputs, num_outputs) → Genome\n\nInstantiate a Genome with an id Id, num_inputs input nodes and num_outputs output nodes.   Creates two hardcoded connections—from input 1 and input 2 to the first output— each with a random weight.\n\nArguments\n\nid::Int: Unique genome identifier.\nnum_inputs::Int: Number of input nodes.\nnum_outputs::Int: Number of output nodes.\n\nReturns\n\nA Genome(id, nodes, connections) where nodes is a Dict{Int,Node} of all input/output nodes, and connections is a Dict{(Int,Int),Connection} with two initial connections (innovation 1 and 2).\n\n\n\n\n\n","category":"method"},{"location":"#MyPackage.Fitness.evaluate_fitness-Tuple{Genome}","page":"Home","title":"MyPackage.Fitness.evaluate_fitness","text":"evaluate_fitness(genome::Genome) → Float64\n\nEvaluate a Genome’s performance on the XOR task by summing squared errors  for all four input–output pairs and returning the negative total error.\n\nArguments\n\ngenome::Genome: The genome whose neural network weights are tested on XOR.\n\nReturns\n\nFloat64: The negative sum of squared errors over the four XOR cases. (Higher value ⇒ lower error ⇒ better fitness.)\n\n\n\n\n\n","category":"method"},{"location":"#MyPackage.ForwardPass.forward_pass-Tuple{Genome, Vector{Float64}}","page":"Home","title":"MyPackage.ForwardPass.forward_pass","text":"forward_pass(genome::Genome, input::Vector{Float64}) → Float64\n\nCompute the output of a simple feedforward network defined by genome.   Assumes a hardcoded structure where each input node i may connect to output node ID 3.   For each enabled connection (i, 3), multiplies input[i] by the connection’s weight and sums the results. Applies a sigmoid activation to the final sum.\n\nArguments\n\ngenome::Genome: The genome containing connection definitions and weights.\ninput::Vector{Float64}: A vector of input values; its length should match the number of input nodes.\n\nReturns\n\nFloat64: The sigmoid-activated output of the network (between 0 and 1).\n\n\n\n\n\n","category":"method"}]
}
